{"ast":null,"code":"var _jsxFileName = \"/Users/stanleymui/pa04-crispy/client/src/components/ansquestion.js\",\n  _s = $RefreshSig$();\nimport SearchBar from \"./searchbar\";\nimport React from \"react\";\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnswerQuestion = ({\n  usernameDisplay,\n  questions,\n  setQuestions,\n  answers,\n  setAnswers,\n  setFilteredTag,\n  setAnswerQuestionVisible,\n  currentQuestionClicked,\n  setHomePageVisible,\n  setAskQuestionPageVisible,\n  setTagPageVisible,\n  setAnswerPageVisible,\n  setSearch,\n  setSearchString\n}) => {\n  _s();\n  const handleQuestionsClick = () => {\n    setHomePageVisible(true);\n    setAnswerPageVisible(false);\n    setAskQuestionPageVisible(false);\n    setTagPageVisible(false);\n    setAnswerQuestionVisible(false);\n    setFilteredTag([]);\n  };\n  const handleTagsClick = () => {\n    setHomePageVisible(false);\n    setAnswerPageVisible(false);\n    setAskQuestionPageVisible(false);\n    setTagPageVisible(true);\n    setAnswerQuestionVisible(false);\n    setFilteredTag([]);\n  };\n  const toggleSearch = searchString => {\n    setFilteredTag([]);\n    setSearchString(searchString);\n    setSearch(true);\n    setHomePageVisible(true);\n    setAnswerPageVisible(false);\n    setAskQuestionPageVisible(false);\n    setTagPageVisible(false);\n    setAnswerQuestionVisible(false);\n  };\n  const [questionUsername, setUsername] = useState('');\n  const [answerText, setAnswerText] = useState('');\n  const newAnswerText = event => {\n    setAnswerText(event.target.value);\n  };\n  const toggleAnswerQuestion = async () => {\n    let text = answerText.toLowerCase();\n    let username = questionUsername.toLowerCase();\n    setUsername('');\n    setAnswerText('');\n\n    // check if title is zero or over 100 characters\n    var error = 0;\n\n    // check if the text box is empty\n    if (text.length === 0) {\n      error += 1;\n    }\n\n    // obtain hypertext in the text\n    let hypertextarray = text.match(/(\\[.*?\\]\\(.*?\\))/g);\n    // if the hypertext exists\n    if (hypertextarray) {\n      for (let i = 0; i < hypertextarray.length; i++) {\n        let match = hypertextarray[i].match(/\\[(.*?)\\]\\((.*?)\\)/);\n        let bracketText = match[1];\n        let parentesesText = match[2];\n        if (bracketText.length === 0) {\n          error += 1;\n        }\n\n        //check for invaild links\n        if (parentesesText.length === 0) {\n          error += 1;\n        }\n        if (parentesesText.startsWith(\"http://\") || parentesesText.startsWith(\"https://\")) {} else {\n          error += 1;\n        }\n      }\n    }\n    // check if username is empty\n    if (username.length === 0) {\n      error += 1;\n    }\n\n    // if there are any errors return\n    if (error > 0) {\n      return;\n    }\n    let currentListofAnswers;\n    try {\n      // add answer to list of answers\n      const response = await axios.post('http://localhost:8000/addanswer', {\n        text,\n        username\n      });\n      currentListofAnswers = response.data;\n      setAnswers(response.data);\n\n      // update the list of of answers for that question\n      let questionId = currentQuestionClicked;\n      console.log(\"this is the questionId\", questionId);\n      let answer = currentListofAnswers[currentListofAnswers.length - 1];\n      const updatedQuestionAnswers = await axios.put(`http://localhost:8000/questions/${questionId}/updateanswers`, {\n        questionId,\n        answer\n      });\n      setQuestions(updatedQuestionAnswers.data);\n    } catch (error) {\n      console.error('Error adding answer client:', error);\n    }\n    console.log(currentListofAnswers);\n    setHomePageVisible(false);\n    setAnswerPageVisible(true);\n    setAskQuestionPageVisible(false);\n    setTagPageVisible(false);\n    setAnswerQuestionVisible(false);\n    setSearch(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-stack\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          width: '85%',\n          fontSize: '50px',\n          textAlign: 'center'\n        },\n        children: \" FakeStackOverflow \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: toggleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hyperlinkButton\",\n        onClick: handleQuestionsClick,\n        children: \"Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hyperlinkButton\",\n        onClick: handleTagsClick,\n        children: \"Tags\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px',\n        maxHeight: '90vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            fontSize: '25px',\n            marginLeft: '70px',\n            marginBottom: '0px',\n            marginTop: '50px'\n          },\n          children: \" Answer Text* \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: {\n            fontFamily: 'Times New Roman, Times, serif',\n            marginLeft: '50px',\n            width: '600px',\n            height: '350px'\n          },\n          value: answerText,\n          onChange: newAnswerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorText, {\n          questionText: answerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '30%'\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"button1post\",\n              onClick: toggleAnswerQuestion,\n              children: \"Post Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 56\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '50%'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                margin: '0px',\n                marginTop: '10px',\n                color: 'red',\n                fontFamily: 'Helvetica'\n              },\n              children: \"*Indicates mandatory fields\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n_s(AnswerQuestion, \"MMa+IkdXawpMb24XaXLaVctUk9Q=\");\n_c = AnswerQuestion;\nconst ErrorText = ({\n  questionText\n}) => {\n  if (questionText.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      style: {\n        paddingLeft: '50px'\n      },\n      children: \"Invalid Text Length\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 16\n    }, this);\n  }\n\n  // obtain hypertext in the text\n  let hypertextarray = questionText.match(/(\\[.*?\\]\\(.*?\\))/g);\n\n  // if the hypertext exists\n  if (hypertextarray) {\n    for (let i = 0; i < hypertextarray.length; i++) {\n      let match = hypertextarray[i].match(/\\[(.*?)\\]\\((.*?)\\)/);\n      let bracketText = match[1];\n      let parentesesText = match[2];\n      if (bracketText.length === 0) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          style: {\n            paddingLeft: '50px'\n          },\n          children: \" Invalid Bracket Text \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 24\n        }, this);\n      }\n\n      //check for invaild links\n      if (parentesesText.length === 0) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          style: {\n            paddingLeft: '50px'\n          },\n          children: \" Invalid Link \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 24\n        }, this);\n      }\n      if (parentesesText.startsWith(\"http://\") || parentesesText.startsWith(\"https://\")) {\n        return;\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          style: {\n            paddingLeft: '50px'\n          },\n          children: \" Invalid Link \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 24\n        }, this);\n      }\n    }\n  }\n};\n_c2 = ErrorText;\nexport default AnswerQuestion;\nvar _c, _c2;\n$RefreshReg$(_c, \"AnswerQuestion\");\n$RefreshReg$(_c2, \"ErrorText\");","map":{"version":3,"names":["SearchBar","React","useState","axios","jsxDEV","_jsxDEV","AnswerQuestion","usernameDisplay","questions","setQuestions","answers","setAnswers","setFilteredTag","setAnswerQuestionVisible","currentQuestionClicked","setHomePageVisible","setAskQuestionPageVisible","setTagPageVisible","setAnswerPageVisible","setSearch","setSearchString","_s","handleQuestionsClick","handleTagsClick","toggleSearch","searchString","questionUsername","setUsername","answerText","setAnswerText","newAnswerText","event","target","value","toggleAnswerQuestion","text","toLowerCase","username","error","length","hypertextarray","match","i","bracketText","parentesesText","startsWith","currentListofAnswers","response","post","data","questionId","console","log","answer","updatedQuestionAnswers","put","className","children","style","width","fontSize","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onClick","margin","maxHeight","marginLeft","marginBottom","marginTop","fontFamily","height","onChange","ErrorText","questionText","display","type","color","_c","paddingLeft","_c2","$RefreshReg$"],"sources":["/Users/stanleymui/pa04-crispy/client/src/components/ansquestion.js"],"sourcesContent":["import SearchBar from \"./searchbar\";\nimport React from \"react\";\nimport { useState } from 'react';\nimport axios from 'axios';\n\nconst AnswerQuestion = ({ usernameDisplay, questions, setQuestions, answers, setAnswers, setFilteredTag, setAnswerQuestionVisible, currentQuestionClicked, setHomePageVisible, setAskQuestionPageVisible, setTagPageVisible, setAnswerPageVisible, setSearch, setSearchString }) => {\n\n    const handleQuestionsClick = () => {\n        setHomePageVisible(true);\n        setAnswerPageVisible(false);\n        setAskQuestionPageVisible(false);\n        setTagPageVisible(false);\n        setAnswerQuestionVisible(false);\n        setFilteredTag([]);\n    };\n\n    const handleTagsClick = () => {\n        setHomePageVisible(false);\n        setAnswerPageVisible(false);\n        setAskQuestionPageVisible(false);\n        setTagPageVisible(true);\n        setAnswerQuestionVisible(false);\n        setFilteredTag([]);\n    };\n\n    const toggleSearch = (searchString) => {\n        setFilteredTag([]);\n        setSearchString(searchString);\n        setSearch(true);\n        setHomePageVisible(true);\n        setAnswerPageVisible(false);\n        setAskQuestionPageVisible(false);\n        setTagPageVisible(false);\n        setAnswerQuestionVisible(false);\n    };\n\n    const [questionUsername, setUsername] = useState('');\n    const [answerText, setAnswerText] = useState('');\n\n    const newAnswerText = (event) => {\n        setAnswerText(event.target.value);\n    }\n\n    const toggleAnswerQuestion = async () => {\n        let text = answerText.toLowerCase();\n        let username = questionUsername.toLowerCase();\n\n        setUsername('');\n        setAnswerText('');\n\n        // check if title is zero or over 100 characters\n        var error = 0\n\n        // check if the text box is empty\n        if (text.length === 0) {\n            error += 1\n        }\n\n        // obtain hypertext in the text\n        let hypertextarray = text.match(/(\\[.*?\\]\\(.*?\\))/g);\n        // if the hypertext exists\n        if (hypertextarray) {\n            for (let i = 0; i < hypertextarray.length; i++) {\n                let match = hypertextarray[i].match(/\\[(.*?)\\]\\((.*?)\\)/);\n                let bracketText = match[1]\n                let parentesesText = match[2];\n\n                if (bracketText.length === 0) {\n                    error += 1\n                }\n\n                //check for invaild links\n                if (parentesesText.length === 0) {\n                    error += 1\n                }\n\n                if (parentesesText.startsWith(\"http://\") || parentesesText.startsWith(\"https://\")) {\n                } else {\n                    error += 1\n                }\n            }\n        }\n        // check if username is empty\n        if (username.length === 0) {\n            error += 1\n        }\n\n        // if there are any errors return\n        if (error > 0) {\n            return\n        }\n\n        let currentListofAnswers;\n\n        try {\n            // add answer to list of answers\n            const response = await axios.post('http://localhost:8000/addanswer', { text, username })\n            currentListofAnswers = response.data\n            setAnswers(response.data)\n\n            // update the list of of answers for that question\n            let questionId = currentQuestionClicked\n            console.log(\"this is the questionId\", questionId)\n            let answer = currentListofAnswers[currentListofAnswers.length - 1]\n            const updatedQuestionAnswers = await axios.put(`http://localhost:8000/questions/${questionId}/updateanswers`, { questionId, answer })\n            setQuestions(updatedQuestionAnswers.data)\n        } catch (error) {\n            console.error('Error adding answer client:', error);\n        }\n\n        console.log(currentListofAnswers)\n\n        setHomePageVisible(false)\n        setAnswerPageVisible(true)\n        setAskQuestionPageVisible(false)\n        setTagPageVisible(false)\n        setAnswerQuestionVisible(false)\n        setSearch(false)\n\n    }\n\n    return (\n        <div className=\"grid-container\">\n            <div className=\"header-stack\">\n                <h1 style={{ width: '85%', fontSize: '50px', textAlign: 'center' }}> FakeStackOverflow </h1>\n                <SearchBar onSearch={toggleSearch} />\n            </div>\n            <div className=\"left-side-bar\">\n                <button className={\"hyperlinkButton\"} onClick={handleQuestionsClick}>Questions</button>\n                <br />\n                <button className={\"hyperlinkButton\"} onClick={handleTagsClick}>Tags</button>\n            </div>\n            <div style={{ margin: '20px', maxHeight: '90vh' }}>\n                <form>\n                    <h1 style={{ fontSize: '25px', marginLeft: '70px', marginBottom: '0px', marginTop: '50px' }}> Answer Text* </h1>\n                    <textarea style={{ fontFamily: 'Times New Roman, Times, serif', marginLeft: '50px', width: '600px', height: '350px' }} value={answerText} onChange={newAnswerText}></textarea>\n                    <ErrorText questionText={answerText} />\n                    <br />\n                    <div style={{ display: 'flex' }}>\n                        <div style={{ width: '30%' }}> <button type=\"button\" className=\"button1post\" onClick={toggleAnswerQuestion}>Post\n                            Answer</button> </div>\n                        <div style={{ width: '50%' }}>\n                            <p style={{ margin: '0px', marginTop: '10px', color: 'red', fontFamily: 'Helvetica' }}>*Indicates mandatory fields</p>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nconst ErrorText = ({ questionText }) => {\n    if (questionText.length === 0) {\n        return <p className=\"error\" style={{ paddingLeft: '50px' }}>Invalid Text Length</p>\n    }\n\n    // obtain hypertext in the text\n    let hypertextarray = questionText.match(/(\\[.*?\\]\\(.*?\\))/g);\n\n    // if the hypertext exists\n    if (hypertextarray) {\n        for (let i = 0; i < hypertextarray.length; i++) {\n            let match = hypertextarray[i].match(/\\[(.*?)\\]\\((.*?)\\)/);\n            let bracketText = match[1]\n            let parentesesText = match[2];\n\n            if (bracketText.length === 0) {\n                return <p className=\"error\" style={{ paddingLeft: '50px' }}> Invalid Bracket Text </p>;\n            }\n\n            //check for invaild links\n            if (parentesesText.length === 0) {\n                return <p className=\"error\" style={{ paddingLeft: '50px' }}> Invalid Link </p>;\n            }\n\n            if (parentesesText.startsWith(\"http://\") || parentesesText.startsWith(\"https://\")) {\n                return;\n            } else {\n                return <p className=\"error\" style={{ paddingLeft: '50px' }}> Invalid Link </p>\n            }\n        }\n    }\n}\n\n\nexport default AnswerQuestion"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}