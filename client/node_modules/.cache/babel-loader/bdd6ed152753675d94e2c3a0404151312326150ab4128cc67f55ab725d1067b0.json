{"ast":null,"code":"var _jsxFileName = \"/Users/stanleymui/pa04-crispy/client/src/components/tagpageprofile.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DisplayUserTags = ({\n  setClickedTagEdit,\n  setEditingTagClicked,\n  setProfilePage,\n  setUserTags,\n  setTagsProfile,\n  setTags,\n  setQuestions,\n  tags,\n  questions,\n  setFilteredTag,\n  setHomePageVisible\n}) => {\n  _s();\n  let copytags = [...tags];\n  const [numTags, setNumTags] = useState(0);\n  const handleEditTag = async tag => {\n    if (tag.emails.length > 1) {\n      return alert(\"Editing Tag Unsuccessful. Mulitple Users Are Using The Tag.\");\n    }\n    setEditingTagClicked(true);\n    setClickedTagEdit(tag);\n  };\n  const handleDeleteTag = async tag => {\n    if (tag.emails.length > 1) {\n      return alert(\"Deleting Tag Unsuccessful. Mulitple Users Are Using The Tag.\");\n    }\n    const response = await axios.post('http://localhost:8000/deletetag', {\n      tag\n    });\n    setQuestions(response.data.questions);\n    setTags(response.data.tags);\n    setTagsProfile(response.data.tags);\n    setUserTags(response.data.usertags);\n  };\n\n  // useEffect(() => {\n  //     // Define printTags function inside the useEffect\n  //     const printTags = () => {\n  //         // Get the container element\n  //         var container = document.getElementById('tag-container');\n  //         container.innerHTML = \"\"\n  //         // Iterate through the tags array\n  //         for (let i = 0; i < copytags.length; i++) {\n  //             const tag = copytags[i];\n  //             // Create a new div element for the tag\n  //             const tagElement = document.createElement('div');\n  //             tagElement.classList.add('tag');\n\n  //             // Create a new anchor element for the tag name\n  //             const tagLink = document.createElement('a');\n  //             tagLink.href = '#'; //can also be button\n  //             tagLink.textContent = tag.name; // Set the text content of the tag link with the tag name\n\n  //             // Attach click event listener to the tag name link\n  //             (function (tagName) {\n  //                 tagLink.addEventListener('click', function (event) {\n  //                     event.preventDefault(); // Prevent the default action of anchor click\n\n  //                     // Retrieve all questions associated with the clicked tag name\n  //                     var questionsWithTag = questions.filter(question => {\n  //                         // Check if any of the question's tag IDs match the clicked tag _id\n  //                         return question.tags.some(tagId => {\n  //                             // Find the tag object in the tags array using the tag ID\n  //                             var tag = copytags.find(tag => tag._id === tagId);\n  //                             // Check if the tag exists and its name matches\n  //                             return tag && tag.name === tagName;\n  //                         });\n  //                     });\n  //                     setFilteredTag(questionsWithTag)\n  //                     setHomePageVisible(true)\n  //                     setProfilePage(false)\n  //                 });\n  //             })(tag.name);\n\n  //             const editLink = document.createElement('button');\n  //             editLink.textContent = \"Edit\";\n\n  //             editLink.addEventListener('click', function (event) {\n  //                 event.preventDefault();\n  //                 handleEditTag(tag);\n  //             });\n\n  //             const deleteLink = document.createElement('button');\n  //             deleteLink.textContent = \"Delete\"\n\n  //             deleteLink.addEventListener('click', function (event) {\n  //                 event.preventDefault();\n  //                 handleDeleteTag(tag);\n  //             });\n\n  //             // Count the number of questions with the current tag\n  //             let questionCount = 0\n  //             questions.forEach(item => {\n  //                 if (item.tags.includes(tag._id)) {\n  //                     questionCount++;\n  //                 }\n  //             });\n\n  //             // Create a new div element for the question count\n  //             var questionCountDiv = document.createElement('div');\n  //             questionCountDiv.textContent = `${questionCount} question${questionCount === 1 ? '' : 's'}`;\n\n  //             // Append the tag link to the tag element\n  //             tagElement.appendChild(tagLink);\n\n  //             // Append the tag element to the container\n  //             container.appendChild(tagElement);\n  //             tagElement.appendChild(questionCountDiv);\n  //             tagElement.appendChild(editLink)\n  //             tagElement.appendChild(deleteLink)\n\n  //             // Add a line break after every third tag\n  //             if ((i + 1) % 3 === 0) {\n  //                 container.appendChild(document.createElement('br'));\n  //             }\n  //         }\n  //     };\n\n  //     // Update the number of tags\n  //     setNumTags(copytags.length);\n  //     printTags();\n  // }, [tags, questions, setFilteredTag, setHomePageVisible, setProfilePage]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"num-tags\",\n        style: {\n          marginLeft: '60px',\n          marginTop: '60px'\n        },\n        children: [\" \", numTags, \" \", numTags === 1 ? 'tag' : 'tags']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"All-Tags\",\n        children: \"User Tags\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"tag-container\",\n        style: {\n          height: \"73vh\",\n          maxHeight: \"73vh\",\n          overflow: \"auto\"\n        },\n        children: copytags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(DisplayUserTags, \"VwgWSmhRUrTy3EFCbA9WzjihLDo=\");\n_c = DisplayUserTags;\nexport default DisplayUserTags;\nvar _c;\n$RefreshReg$(_c, \"DisplayUserTags\");","map":{"version":3,"names":["axios","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","DisplayUserTags","setClickedTagEdit","setEditingTagClicked","setProfilePage","setUserTags","setTagsProfile","setTags","setQuestions","tags","questions","setFilteredTag","setHomePageVisible","_s","copytags","numTags","setNumTags","handleEditTag","tag","emails","length","alert","handleDeleteTag","response","post","data","usertags","children","id","style","marginLeft","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","height","maxHeight","overflow","map","index","className","_c","$RefreshReg$"],"sources":["/Users/stanleymui/pa04-crispy/client/src/components/tagpageprofile.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n\nconst DisplayUserTags = ({setClickedTagEdit, setEditingTagClicked, setProfilePage, setUserTags, setTagsProfile, setTags, setQuestions, tags, questions, setFilteredTag, setHomePageVisible }) => {\n    let copytags = [...tags]\n    const [numTags, setNumTags] = useState(0);\n\n    const handleEditTag = async (tag) => {\n        if (tag.emails.length > 1) {\n            return alert(\"Editing Tag Unsuccessful. Mulitple Users Are Using The Tag.\")\n        }\n        setEditingTagClicked(true)\n        setClickedTagEdit(tag)\n    }\n\n    const handleDeleteTag = async (tag) => {\n        if (tag.emails.length > 1) {\n            return alert(\"Deleting Tag Unsuccessful. Mulitple Users Are Using The Tag.\")\n        }\n        const response = await axios.post('http://localhost:8000/deletetag', { tag })\n        setQuestions(response.data.questions)\n        setTags(response.data.tags)\n        setTagsProfile(response.data.tags)\n        setUserTags(response.data.usertags)\n    }\n\n    // useEffect(() => {\n    //     // Define printTags function inside the useEffect\n    //     const printTags = () => {\n    //         // Get the container element\n    //         var container = document.getElementById('tag-container');\n    //         container.innerHTML = \"\"\n    //         // Iterate through the tags array\n    //         for (let i = 0; i < copytags.length; i++) {\n    //             const tag = copytags[i];\n    //             // Create a new div element for the tag\n    //             const tagElement = document.createElement('div');\n    //             tagElement.classList.add('tag');\n\n    //             // Create a new anchor element for the tag name\n    //             const tagLink = document.createElement('a');\n    //             tagLink.href = '#'; //can also be button\n    //             tagLink.textContent = tag.name; // Set the text content of the tag link with the tag name\n\n    //             // Attach click event listener to the tag name link\n    //             (function (tagName) {\n    //                 tagLink.addEventListener('click', function (event) {\n    //                     event.preventDefault(); // Prevent the default action of anchor click\n\n    //                     // Retrieve all questions associated with the clicked tag name\n    //                     var questionsWithTag = questions.filter(question => {\n    //                         // Check if any of the question's tag IDs match the clicked tag _id\n    //                         return question.tags.some(tagId => {\n    //                             // Find the tag object in the tags array using the tag ID\n    //                             var tag = copytags.find(tag => tag._id === tagId);\n    //                             // Check if the tag exists and its name matches\n    //                             return tag && tag.name === tagName;\n    //                         });\n    //                     });\n    //                     setFilteredTag(questionsWithTag)\n    //                     setHomePageVisible(true)\n    //                     setProfilePage(false)\n    //                 });\n    //             })(tag.name);\n\n    //             const editLink = document.createElement('button');\n    //             editLink.textContent = \"Edit\";\n\n    //             editLink.addEventListener('click', function (event) {\n    //                 event.preventDefault();\n    //                 handleEditTag(tag);\n    //             });\n\n    //             const deleteLink = document.createElement('button');\n    //             deleteLink.textContent = \"Delete\"\n\n    //             deleteLink.addEventListener('click', function (event) {\n    //                 event.preventDefault();\n    //                 handleDeleteTag(tag);\n    //             });\n\n    //             // Count the number of questions with the current tag\n    //             let questionCount = 0\n    //             questions.forEach(item => {\n    //                 if (item.tags.includes(tag._id)) {\n    //                     questionCount++;\n    //                 }\n    //             });\n\n    //             // Create a new div element for the question count\n    //             var questionCountDiv = document.createElement('div');\n    //             questionCountDiv.textContent = `${questionCount} question${questionCount === 1 ? '' : 's'}`;\n\n    //             // Append the tag link to the tag element\n    //             tagElement.appendChild(tagLink);\n\n    //             // Append the tag element to the container\n    //             container.appendChild(tagElement);\n    //             tagElement.appendChild(questionCountDiv);\n    //             tagElement.appendChild(editLink)\n    //             tagElement.appendChild(deleteLink)\n\n    //             // Add a line break after every third tag\n    //             if ((i + 1) % 3 === 0) {\n    //                 container.appendChild(document.createElement('br'));\n    //             }\n    //         }\n    //     };\n\n    //     // Update the number of tags\n    //     setNumTags(copytags.length);\n    //     printTags();\n    // }, [tags, questions, setFilteredTag, setHomePageVisible, setProfilePage]);\n\n    return (\n        <>\n            <div>\n                <p id=\"num-tags\" style={{ marginLeft: '60px', marginTop: '60px' }}> {numTags} {numTags === 1 ? 'tag' : 'tags'}</p >\n                <p id=\"All-Tags\">User Tags</p>\n                <br></br>\n                <div id=\"tag-container\" style={{ height: \"73vh\", maxHeight: \"73vh\", overflow: \"auto\"}}>\n                    {copytags.map((tag, index) => (\n                        <div className=\"\">\n\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default DisplayUserTags;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}